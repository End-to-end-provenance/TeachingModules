a <- 1
b <- a + 1
ddg.debug.on()
f()
traceback()
source("/Users/blerner/Documents/Process/DataProvenance/github/RDataTracker/R/RDataTracker.R")
ddg.init("/Users/blerner/Documents/Process/DataProvenance/workspace/ddg-r/examples/ScopeTest/ScopeTest.R",
"/Users/blerner/Documents/Process/DataProvenance/workspace/ddg-r/examples/ScopeTest/ddg",
enable.console=TRUE)
##-ddg-- Mon Jul  7 14:58:08 2014 ------##
f <- function() {
a <<- b * 10
ddg.procedure(ins=list("b"), outs.data=list("a"))
}
g <- function(a) {
ddg.procedure()
c <- a
}
a <- 1
b <- a + 1
ddg.debug.on()
f()
cmd.expr
vars.used
cmd.expr
source("/Users/blerner/Documents/Process/DataProvenance/github/RDataTracker/R/RDataTracker.R")
ddg.init("/Users/blerner/Documents/Process/DataProvenance/workspace/ddg-r/examples/ScopeTest/ScopeTest.R",
"/Users/blerner/Documents/Process/DataProvenance/workspace/ddg-r/examples/ScopeTest/ddg",
enable.console=TRUE)
##-ddg-- Mon Jul  7 14:59:03 2014 ------##
f <- function() {
a <<- b * 10
ddg.procedure(ins=list("b"), outs.data=list("a"))
}
g <- function(a) {
ddg.procedure()
c <- a
}
a <- 1
b <- a + 1
ddg.debug.on()
f()
obj
source("/Users/blerner/Documents/Process/DataProvenance/github/RDataTracker/R/RDataTracker.R")
ddg.init("/Users/blerner/Documents/Process/DataProvenance/workspace/ddg-r/examples/ScopeTest/ScopeTest.R",
"/Users/blerner/Documents/Process/DataProvenance/workspace/ddg-r/examples/ScopeTest/ddg",
enable.console=TRUE)
##-ddg-- Mon Jul  7 14:59:45 2014 ------##
f <- function() {
a <<- b * 10
ddg.procedure(ins=list("b"), outs.data=list("a"))
}
g <- function(a) {
ddg.procedure()
c <- a
}
a <- 1
b <- a + 1
ddg.debug.on()
f()
cmd.expr
r
.ddg.is.assign
source("/Users/blerner/Documents/Process/DataProvenance/github/RDataTracker/R/RDataTracker.R")
ddg.init("/Users/blerner/Documents/Process/DataProvenance/workspace/ddg-r/examples/ScopeTest/ScopeTest.R",
"/Users/blerner/Documents/Process/DataProvenance/workspace/ddg-r/examples/ScopeTest/ddg",
enable.console=TRUE)
##-ddg-- Mon Jul  7 15:09:03 2014 ------##
f <- function() {
a <<- b * 10
ddg.procedure(ins=list("b"), outs.data=list("a"))
}
g <- function(a) {
ddg.procedure()
c <- a
}
a <- 1
b <- a + 1
ddg.debug.on()
f()
cmd.expr
vars.used
source("/Users/blerner/Documents/Process/DataProvenance/github/RDataTracker/R/RDataTracker.R")
ddg.init("/Users/blerner/Documents/Process/DataProvenance/workspace/ddg-r/examples/ScopeTest/ScopeTest.R",
"/Users/blerner/Documents/Process/DataProvenance/workspace/ddg-r/examples/ScopeTest/ddg",
enable.console=TRUE)
##-ddg-- Mon Jul  7 15:15:06 2014 ------##
f <- function() {
a <<- b * 10
ddg.procedure(ins=list("b"), outs.data=list("a"))
}
g <- function(a) {
ddg.procedure()
c <- a
}
a <- 1
b <- a + 1
ddg.debug.on()
f()
cmd.expr
vars.used
cmd.expr
traceback()
source("/Users/blerner/Documents/Process/DataProvenance/github/RDataTracker/R/RDataTracker.R")
ddg.init("/Users/blerner/Documents/Process/DataProvenance/workspace/ddg-r/examples/ScopeTest/ScopeTest.R",
"/Users/blerner/Documents/Process/DataProvenance/workspace/ddg-r/examples/ScopeTest/ddg",
enable.console=TRUE)
##-ddg-- Mon Jul  7 15:17:07 2014 ------##
f <- function() {
a <<- b * 10
ddg.procedure(ins=list("b"), outs.data=list("a"))
}
g <- function(a) {
ddg.procedure()
c <- a
}
a <- 1
b <- a + 1
ddg.debug.on()
f()
vars.used
##-ddg-- Mon Jul  7 15:17:39 2014 ------##
ddg.save()
##-ddg-- Mon Jul  7 15:18:17 2014 ------##
source("/Users/blerner/Documents/Process/DataProvenance/github/RDataTracker/R/RDataTracker.R")
ddg.init("/Users/blerner/Documents/Process/DataProvenance/workspace/ddg-r/examples/ScopeTest/ScopeTest.R",
"/Users/blerner/Documents/Process/DataProvenance/workspace/ddg-r/examples/ScopeTest/ddg",
enable.console=TRUE)
##-ddg-- Mon Jul  7 15:19:24 2014 ------##
f <- function() {
a <<- b * 10
ddg.procedure(ins=list("b"), outs.data=list("a"))
}
g <- function(a) {
ddg.procedure()
c <- a
}
a <- 1
b <- a + 1
ddg.debug.on()
f()
##-ddg-- Mon Jul  7 15:19:24 2014 ------##
c <- 100
g(c)
##-ddg-- Mon Jul  7 15:19:24 2014 ------##
ddg.save()
##-ddg-- Mon Jul  7 15:19:24 2014 ------##
install.packages("~/Documents/Process/DataProvenance/RDataTracker_0.5.035.tar.gz", repos = NULL, type = "source")
install.packages("~/Documents/Process/DataProvenance/RDataTracker_0.5.035.tar.gz", repos = NULL, type = "source")
install.packages("~/Documents/Process/DataProvenance/RDataTracker_0.5.035.tar.gz", repos = NULL, type = "source")
install.packages("~/Documents/Process/DataProvenance/RDataTracker_0.5.035.tar.gz", repos = NULL, type = "source")
install.packages("~/Documents/Process/DataProvenance/RDataTracker_0.5.035.tar.gz", repos = NULL, type = "source")
version()
R.Version()
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
R.Version()
detach("package:utils", unload=TRUE)
detach("package:stats", unload=TRUE)
detach("package:methods", unload=TRUE)
install.packages("utils")
detach("package:stats", unload=TRUE)
detach("package:methods", unload=TRUE)
detach("package:utils", unload=TRUE)
install.packages("utils")
install.packages("utils")
utils::menuInstallPkgs()
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
utils
require(utils)
utils:::menuInstallPkgs()
library("utils")
library("gtools")
utils:::menuInstallPkgs()
utils:::menuInstallLocal()
library("RDataTracker", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
remove.packages("RDataTracker")
install.packages("~/Documents/Process/DataProvenance/RDataTracker_0.5.051.tar.gz", repos=NULL, type="source")
remove.packages("RDataTracker")
install.package("~/Downlaods/RDataTracker_1.000.tar.gz", repos=NULL, type="source")
install.packages("~/Downlaods/RDataTracker_1.000.tar.gz", repos=NULL, type="source")
install.packages("~/Downlaods/RDataTracker_1.000(1).tar.gz", repos=NULL, type="source")
install.packages("~/Downloads/RDataTracker_1.000.tar.gz", repos=NULL, type="source")
is.return.statement <- function (parsed.expr) {
if (is.call(parsed.expr)) {
print ("Found a call")
if (parsed.expr[[1]] == "return") {
print ("Found return")
return TRUE
}
}
return FALSE
}
return
is.return.statement <- function (parsed.expr) {
if (is.call(parsed.expr)) {
print ("Found a call")
if (parsed.expr[[1]] == "return") {
print ("Found return")
return TRUE
}
}
return FALSE
}
return
is.return.statement <- function (parsed.expr) {
if (is.call(parsed.expr)) {
print ("Found a call")
if (parsed.expr[[1]] == "return") {
print ("Found return")
return (TRUE)
}
}
return (FALSE)
}
return.stmt <- parse(text="return(1)")
is.return.statement(return.stmt)
str(return.stmt)
is.call(return.stmt)
return.stmt[[1]]
is.expression(return.stmt)
is.expression(return.stmt[[1]])
is.return.statement <- function (parsed.expr) {
if (is.expression(parsed.expr)) {
parsed.expr <- parsed.expr[[1]]
}
if (is.call(parsed.expr)) {
print ("Found a call")
if (parsed.expr[[1]] == "return") {
print ("Found return")
return (TRUE)
}
}
return (FALSE)
}
is.call(return.stmt)
is.expression(return.stmt)
is.expression(return.stmt[[1]])
is.call(return.stmt[[1]])
is.return.statement(return.stmt)
not.return.stmt <- parse(text="c(1,2"))
not.return.stmt <- parse(text="c(1,2)")
is.return.stmt(not.return.stmt)
is.return.statement(not.return.stmt)
not.return.stmt2 <- parse(text="3")
is.return.statement(not.return.stmt2)
has.return.statement <- function () {
# Base case.
if (!is.recursive(obj)) return(FALSE)
# Return statement.
if (is.return.statement(obj)) {
return TRUE
}
# Not a return statement.  Recurse on the parts of the expression.
else {
return (lapply(obj, has.return.statement))
}
}
has.return.statement <- function () {
# Base case.
if (!is.recursive(obj)) return(FALSE)
# Return statement.
if (is.return.statement(obj)) {
return (TRUE)
}
# Not a return statement.  Recurse on the parts of the expression.
else {
return (lapply(obj, has.return.statement))
}
}
has.return.statement(not.return.stmt2)
has.return.statement <- function (obj) {
# Base case.
if (!is.recursive(obj)) return(FALSE)
# Return statement.
if (is.return.statement(obj)) {
return (TRUE)
}
# Not a return statement.  Recurse on the parts of the expression.
else {
return (lapply(obj, has.return.statement))
}
}
has.return.statement(not.return.stmt2)
has.return.statement(not.return.stmt)
has.return.statement(return.stmt)
has.return.statement(parse(text=f1))
f1 <- function () {
a <-1
b <- 2
}
has.return.statement(parse(text=deparse(f1)))
f2 <- function (x) {
return (x + 1)
}
has.return.statement(parse(text=deparse(f2)))
has.return.statement <- function (obj) {
# Base case.
if (!is.recursive(obj)) return(FALSE)
# Return statement.
if (is.return.statement(obj)) {
return (TRUE)
}
# Not a return statement.  Recurse on the parts of the expression.
else {
return (any(lapply(obj, has.return.statement)))
}
}
has.return.statement(parse(text=deparse(f1)))
has.return.statement <- function (obj) {
# Base case.
if (!is.recursive(obj)) return(FALSE)
# Return statement.
if (is.return.statement(obj)) {
return (TRUE)
}
# Not a return statement.  Recurse on the parts of the expression.
else {
return (any(sapply(obj, has.return.statement)))
}
}
has.return.statement(parse(text=deparse(f1)))
has.return.statement(parse(text=deparse(f2)))
is.return.statement <- function (parsed.expr) {
# Unpack it if we have an expression
#  if (is.expression(parsed.expr)) {
#    parsed.expr <- parsed.expr[[1]]
#  }
# Check if it is a function call
if (is.call(parsed.expr)) {
# Check that the function called is the return function
if (parsed.expr[[1]] == "return") {
return (TRUE)
}
}
return (FALSE)
}
has.return.statement(parse(text=deparse(f1)))
has.return.statement(parse(text=deparse(f2)))
return()
f <- function () return()
f()
parse(text="return()")
simple.return <- parse(text="return()")
simple.return[[1]]
simple.return[[1]][[2]]
is.call(simple.return[[1]])
call ("a", 1)
parse(text=call ("a", 1))
deparse(call ("a", 1))
replace.return.statements <- function (obj) {
# Base case.
if (!is.recursive(obj)) return(deparse(obj))
# Return statement.
if (is.return.statement(obj)) {
if (length(obj) == 1) {
return ("ddg.return.value()")
}
return (deparse(call("ddg.return.value", obj[[2]])))
}
# Not a return statement.  Recurse on the parts of the expression.
else {
return (paste0(sapply(obj, has.return.statement)), collapse=" ")
}
}
parse(text=replace.return.statements(parse(text=deparse(f1))))
replace.return.statements <- function (obj) {
# Base case.
if (!is.recursive(obj)) return(deparse(obj))
# Return statement.
if (is.return.statement(obj)) {
if (length(obj) == 1) {
return ("ddg.return.value()")
}
return (deparse(call("ddg.return.value", obj[[2]])))
}
# Not a return statement.  Recurse on the parts of the expression.
else {
return (paste0(sapply(obj, has.return.statement), collapse=" "))
}
}
parse(text=replace.return.statements(parse(text=deparse(f1))))
replace.return.statements <- function (obj) {
# Base case.
if (!is.recursive(obj)) return(deparse(obj))
# Return statement.
if (is.return.statement(obj)) {
if (length(obj) == 1) {
return ("ddg.return.value()")
}
return (deparse(call("ddg.return.value", obj[[2]])))
}
# Not a return statement.  Recurse on the parts of the expression.
else {
return (paste0(sapply(obj, replace.return.statements), collapse=" "))
}
}
parse(text=replace.return.statements(parse(text=deparse(f1))))
replace.return.statements(parse(text="3"))
replace.return.statements(parse(text="a(1)"))
replace.return.statements <- function (obj) {
# Base case.
if (!is.recursive(obj)) return(obj)
# Return statement.
if (is.return.statement(obj)) {
if (length(obj) == 1) {
return (call("ddg.return.value"))
}
return (call("ddg.return.value", obj[[2]]))
}
# Not a return statement.  Recurse on the parts of the expression.
else {
return (lapply(obj, replace.return.statements))
}
}
replace.return.statements(parse(text="3"))
replace.return.statements(parse(text="a(1)"))
replace.return.statements(parse(text="return(1)"))
replace.return.statements(parse(text="function () {return(1)}"))
replace.return.statements(parse(text="a(1)"))
# Confirming that RDataTracker is not loaded
ddg.run
source (("/Users/blerner/Documents/Process/DataProvenance/RDataTracker-6.R"))
ddg.run("FunctionAnnotationTest.R")
##-ddg-- Sat Jun 20 12:51:27 2015 ------##
setwd("~/Dropbox/HarvardForest/BerkeleyWorkshop/Scripts/FlatDailySolarRadiation")
library(RDataTracker)
ddg.run ("DailySolarRadiation.R")
##-ddg-- Tue Oct 13 11:25:47 2015 ------##
##-ddg-- Tue Oct 13 11:25:48 2015 ------##
ddg.run ("DailySolarRadiation.R")
##-ddg-- Tue Oct 13 11:26:39 2015 ------##
##-ddg-- Tue Oct 13 11:26:40 2015 ------##
setwd("~/Dropbox/HarvardForest/BerkeleyWorkshop/Scripts/DailySolarRadiation")
ddg.run ("DailySolarRadiation.R")
##-ddg-- Tue Oct 13 11:27:22 2015 ------##
##-ddg-- Tue Oct 13 11:27:23 2015 ------##
ddg.run ("DailySolarRadiation.R")
##-ddg-- Tue Oct 13 11:39:07 2015 ------##
##-ddg-- Tue Oct 13 11:39:08 2015 ------##
setwd("~/Dropbox/HarvardForest/BerkeleyWorkshop/Scripts/FlatDailySolarRadiation")
ddg.run ("DailySolarRadiation.R")
##-ddg-- Tue Oct 13 11:40:01 2015 ------##
##-ddg-- Tue Oct 13 11:40:03 2015 ------##
setwd("~/Dropbox/HarvardForest/BerkeleyWorkshop/Scripts/DailySolarRadiation")
ddg.run ("DailySolarRadiation.R")
##-ddg-- Tue Oct 13 11:43:56 2015 ------##
ddg.run ("DailySolarRadiation.R")
##-ddg-- Tue Oct 13 11:44:11 2015 ------##
##-ddg-- Tue Oct 13 11:44:12 2015 ------##
# Load the mtcars data set that comes with R
data (mtcars)
# All the cars
allCars.df <- mtcars
# Create separate data frames for each number of cylinders
cars4Cyl.df <- allCars.df[allCars.df$cyl == 4, ]
cars6Cyl.df <- allCars.df[allCars.df$cyl == 6, ]
cars8Cyl.df <- allCars.df[cars6Cyl.df$cyl == 8, ]
# Create a table with the average mpg for each # cylinders
cylinders = c(4, 6, 8)
mpg = c(mean(cars4Cyl.df$mpg), mean(cars6Cyl.df$mpg), mean(cars8Cyl.df$mpg))
cyl.vs.mpg.df <- data.frame (cylinders, mpg)
# Plot it
plot(cylinders, mpg)
# Load the mtcars data set that comes with R
data (mtcars)
# All the cars
allCars.df <- mtcars
# Create separate data frames for each number of cylinders
cars4Cyl.df <- allCars.df[allCars.df$cyl == 4, ]
cars6Cyl.df <- allCars.df[allCars.df$cyl == 6, ]
cars8Cyl.df <- allCars.df[cars8Cyl.df$cyl == 8, ]
# Create a table with the average mpg for each # cylinders
cylinders = c(4, 6, 8)
mpg = c(mean(cars4Cyl.df$mpg), mean(cars6Cyl.df$mpg), mean(cars8Cyl.df$mpg))
cyl.vs.mpg.df <- data.frame (cylinders, mpg)
# Plot it
plot(cylinders, mpg)
library (RDataTracker)
setwd("~/Documents/Process/DataProvenance/Talks/HF Lab Group - Oct 2015/Cars")
ddg.run("Cars.R")
##-ddg-- Tue Oct 13 14:51:15 2015 ------##
##-ddg-- Tue Oct 13 14:51:15 2015 ------##
setwd("~/Documents/Process/DataProvenance/Talks/HF Lab Group - Oct 2015/BuggyCars")
ddg.run("BuggyCars.R")
##-ddg-- Tue Oct 13 15:15:03 2015 ------##
##-ddg-- Tue Oct 13 15:15:04 2015 ------##
setwd("~/Documents/Process/DataProvenance/Talks/HF Lab Group - Oct 2015/BuggyCars2")
ddg.run("BuggyCars2.R")
##-ddg-- Tue Oct 13 15:21:19 2015 ------##
##-ddg-- Tue Oct 13 15:21:19 2015 ------##
ddg.run("BuggyCars2.R")
##-ddg-- Tue Oct 13 15:21:53 2015 ------##
ddg.run("BuggyCars2.R")
##-ddg-- Tue Oct 13 15:27:26 2015 ------##
setwd("~/Documents/Process/DataProvenance/Talks/HF Lab Group - Oct 2015/FlatDailySolarRadiation")
ddg.run("FlatDailySolarRadiation.R")
##-ddg-- Tue Oct 13 15:30:48 2015 ------##
##-ddg-- Tue Oct 13 15:30:49 2015 ------##
setwd("~/Documents/Process/DataProvenance/Talks/HF Lab Group - Oct 2015/DailySolarRadiation")
ddg.run("DailySolarRadiation.R")
##-ddg-- Tue Oct 13 15:48:07 2015 ------##
##-ddg-- Tue Oct 13 15:48:08 2015 ------##
